apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    app.kubernetes.io/name: grafana
    helm.sh/chart: grafana-5.2.11
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/component: grafana
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        helm.sh/chart: grafana-5.2.11
        app.kubernetes.io/instance: grafana
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: grafana
      annotations:
        checksum/secret: 8605048fc471a41ac54429444698dca5d67eb713d31986ceaf5599435c60b084
        checksum/config: 7487b72cb12ef841e49f614ab0be94b6b9b83862884b1dfddb7c238578903908
        checksum/dashboard-provider: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:

      serviceAccountName: grafana
      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: grafana
                    app.kubernetes.io/instance: grafana
                    app.kubernetes.io/component: grafana
                namespaces:
                  - "monitoring"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        runAsUser: 1001
        fsGroup: 1001
        runAsNonRoot: true
      containers:
        - name: grafana
          image: docker.io/bitnami/grafana:7.5.5-debian-10-r0
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: grafana-envvars
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-admin
                  key: GF_SECURITY_ADMIN_PASSWORD
          volumeMounts:
            - name: data
              mountPath: /opt/bitnami/grafana/data
          ports:
            - name: dashboard
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/health
              port: dashboard
            initialDelaySeconds: 120
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /api/health
              port: dashboard
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: grafana